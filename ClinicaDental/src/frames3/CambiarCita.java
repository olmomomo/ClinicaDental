/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package frames;

import clases.Cita;
import clases.Dentista;
import java.awt.Frame;
import javax.swing.*;
import java.sql.Date;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import paquete.Conexion;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.ArrayList;

/**
 *
 * @author ayele
 */
public class CambiarCita extends javax.swing.JDialog {

    Conexion conexion=new Conexion();
    private java.util.Date fechaSeleccionada;
     private Dentista dentistaActual;
    private Cita idCita;
    private JComboBox<Dentista> cmbDentista;
    private List<Dentista> dentistas; // Debes cargar esta lista desde BD al iniciar
    private List<Cita> citas;  
    private boolean guardado = false;

    /**
     * Creates new form CambiarCita
     * @param parent
     * @param modal
     */
    public CambiarCita(Frame parent, boolean modal, Cita idCita, Dentista dentistaActual, List<Dentista> dentistas, List<Cita> citas) {
        super(parent, modal);
        initComponents();
        cmbDentista = new JComboBox<Dentista>();
        cmbDentista = new JComboBox<>();
    for (Dentista d : dentistas) {
        cmbDentista.addItem(d);
    }


    // Luego agrega el combo a tu layout en vez del viejo:
    // Esto depende de tu diseño, pero ejemplo rápido:
    jPanel1.remove(combo);   // remueve el viejo combo (jComboBox1 es el nombre real en initComponents)
    jPanel1.add(cmbDentista);     // agrega el nuevo combo genérico
    jPanel1.revalidate();
    jPanel1.repaint();
        this.idCita = idCita;
    this.dentistaActual = dentistaActual;
    this.dentistas = dentistas;
    this.citas = citas;
            txtDentista.setText(dentistaActual.getNombre());
txtDentista.setEditable(false); 
    fechaSeleccionada = (Date) idCita.getFecha();
        nuevaFecha.setDate(fechaSeleccionada);

     // Asignar fecha seleccionada correctamente
    if (idCita != null && idCita.getFecha() != null) {
        fechaSeleccionada = new java.util.Date(idCita.getFecha().getTime()); // Asegura java.util.Date
        nuevaFecha.setDate(fechaSeleccionada);
    }

    // Cargar dentista actual si no está recibido
    if (this.dentistaActual == null && idCita != null) {
        this.dentistaActual = cargarDentistaPorId(idCita.getIdDentista());
    }

    // Mostrar nombre del dentista actual en txtDentista
    if (this.dentistaActual != null) {
        txtDentista.setText(this.dentistaActual.getNombre());
    }

    // Cargar dentistas en el combo genérico
    cargarDentistas();

    // Cargar horas disponibles para la fecha y dentista actual
    cargarHorasDisponibles();

    // Seleccionar hora actual en el combo de horas
    if (idCita != null && idCita.getHora() != null) {
        cmbHora.setSelectedItem(idCita.getHora());
    }

    // Listener para actualizar horas cuando cambia la fecha
    nuevaFecha.getDateEditor().addPropertyChangeListener(evt -> {
        if ("date".equals(evt.getPropertyName())) {
            fechaSeleccionada = nuevaFecha.getDate();
            cargarHorasDisponibles();
        }
    });
    
    cmbDentista.addActionListener(e -> {
    Dentista seleccionado = (Dentista) cmbDentista.getSelectedItem();
    if (seleccionado != null) {
        txtDentista.setText(seleccionado.getNombre());
        fechaSeleccionada = nuevaFecha.getDate(); // la fecha seleccionada actual
        cargarHorasDisponibles();
    }
});
    }

    public boolean isGuardado() {
    return guardado;
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nuevaFecha = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        cmbHora = new javax.swing.JComboBox<>();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtDentista = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(253, 247, 229));

        jLabel1.setText("Nueva fecha ");

        jLabel2.setText("Nueva Hora ");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel3.setText("Dentista actual:");

        txtDentista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDentistaActionPerformed(evt);
            }
        });

        jLabel4.setText("¿Cambiar de doctor sino esta disponible?");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.setAutoscrolls(true);
        combo.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnGuardar)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(btnCancelar)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nuevaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDentista, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbHora, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nuevaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDentista, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addGap(57, 57, 57))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Dentista cargarDentistaPorId(int idDentista) {
    Dentista d = null;
    try {
        ResultSet rs = conexion.ejecutarConsulta(
            "SELECT d.id_dentista, d.nombre, d.turno, d.especialidad " +
            "FROM dentista d JOIN usuario u ON d.id_usuario = u.id_usuario " +
            "WHERE d.id_dentista = " + idDentista
        );
        if (rs.next()) {
            d = new Dentista();
            d.setId(rs.getInt("id_dentista"));
            d.setNombre(rs.getString("nombre"));
            d.setTurno(rs.getString("turno"));
            d.setEspecialidad(rs.getString("especialidad"));
        }
        rs.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar dentista: " + e.getMessage());
    }
    return d;
}


   private void cargarDentistas() {
    cmbDentista.removeAllItems();
    try {
        ResultSet rsDentistas = conexion.consultarTodo("dentista");
        while (rsDentistas != null && rsDentistas.next()) {
            Dentista d = new Dentista();
            d.setId(rsDentistas.getInt("id_dentista"));
            d.setEspecialidad(rsDentistas.getString("especialidad"));
            d.setTurno(rsDentistas.getString("turno"));

            int idUsuario = rsDentistas.getInt("id_usuario");
            ResultSet rsUsuario = conexion.buscarPorId("usuario", "id_usuario", idUsuario);
            String nombreCompleto = "Desconocido";
            if (rsUsuario != null && rsUsuario.next()) {
                nombreCompleto = rsUsuario.getString("nombre") + " " 
                               + rsUsuario.getString("apellidoP") + " " 
                               + rsUsuario.getString("apellidoM");
                rsUsuario.close();
            }
            d.setNombre(nombreCompleto);
            cmbDentista.addItem(d);
        }
        if (rsDentistas != null) rsDentistas.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar dentistas: " + e.getMessage());
    }
}




private void cargarHorasDisponibles() {
        cmbHora.removeAllItems();

        Dentista dentistaSeleccionado = (Dentista) cmbDentista.getSelectedItem();

        if (dentistaSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un doctor primero.");
            return;
        }

        if (fechaSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Seleccione una fecha primero.");
            return;
        }

        String turno = dentistaSeleccionado.getTurno();
        int idDentista = dentistaSeleccionado.getId();
        String[] horasMatutinas = {"09:00", "10:00", "11:00", "12:00", "13:00", "14:00"};
        String[] horasVespertinas = {"15:00", "16:00", "17:00", "18:00", "19:00"};
        String[] horas = turno.equalsIgnoreCase("Matutino") ? horasMatutinas : horasVespertinas;

        java.sql.Date fechaSQL = new java.sql.Date(fechaSeleccionada.getTime());

        try {
            String sql = "SELECT hora FROM cita WHERE id_dentista = ? AND fecha = ?";
            ResultSet rs = conexion.ejecutarConsulta(sql, idDentista, fechaSQL);

            List<String> horasOcupadas = new ArrayList<>();
            while (rs != null && rs.next()) {
                horasOcupadas.add(rs.getString("hora"));
            }
            if (rs != null) rs.close();

            for (String hora : horas) {
                if (!horasOcupadas.contains(hora)) {
                    cmbHora.addItem(hora);
                }
            }

            if (cmbHora.getItemCount() == 0) {
                JOptionPane.showMessageDialog(this,
                        "El doctor no tiene horas disponibles en este turno.",
                        "Sin disponibilidad", JOptionPane.WARNING_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar horarios: " + e.getMessage());
        }
    }

private boolean horaValidaParaTurno(String turno, String hora) {
        int h = Integer.parseInt(hora.split(":")[0]);
        if (turno == null) {
    System.out.println("Turno es null, no se puede validar horario.");
    return false; // o lo que corresponda
}

        if ("Matutino".equalsIgnoreCase(turno)) {
            return h >= 9 && h <= 14;
        } else if (turno.equalsIgnoreCase("vespertino")) {
            return h >= 15 && h <= 19;
        }
        return false;
    }

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
   java.util.Date fechaUtil = nuevaFecha.getDate();
    if (fechaUtil == null) {
        JOptionPane.showMessageDialog(this, "Seleccione una fecha.");
        return;
    }

    String horaSeleccionada = (String) cmbHora.getSelectedItem();
    if (horaSeleccionada == null || horaSeleccionada.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Seleccione una hora.");
        return;
    }

    // Validar si el doctor actual puede atender a esa hora
    if (!horaValidaParaTurno(dentistaActual.getTurno(), horaSeleccionada)) {
        JOptionPane.showMessageDialog(this, "Doctor no disponible en ese horario.");
        return;
    }

    // Reagendar cita con el dentista actual
    cambiarCita(idCita, fechaUtil, horaSeleccionada, dentistaActual.getId());
    JOptionPane.showMessageDialog(this, "Cita reagendada correctamente.");
    this.dispose();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cambiarCita(Cita cita, java.util.Date nuevaFecha, String nuevaHora, int idDentista) {
    Map<String, Object> datos = new HashMap<>();
    datos.put("fecha", new java.sql.Date(nuevaFecha.getTime()));  // Convertir aquí también
    datos.put("hora", nuevaHora);
    datos.put("id_dentista", idDentista);

    boolean exito = conexion.actualizarPorCampo("cita", datos, "id_cita", cita.getIdCita());
    if (!exito) {
        JOptionPane.showMessageDialog(this, "Error al actualizar la cita");
    }
}

    private Dentista buscarOtroDoctorDisponible(Date fecha, String hora, String especialidad) {
        for (Dentista d : dentistas) {
            if (!d.getEspecialidad().equalsIgnoreCase(especialidad)) continue;

            if (!horaValidaParaTurno(d.getTurno(), hora)) continue;

            boolean ocupado = false;
            for (Cita c : citas) {
                if (c.getIdDentista() == d.getId()
                    && c.getFecha().equals(fecha)
                    && c.getHora().equals(hora)) {
                    ocupado = true;
                    break;
                }
            }

            if (!ocupado) return d;
        }
        return null;
    }

    
    private void cambiarCita(Cita cita, Date nuevaFecha, String nuevaHora, int idDentista) {
    Map<String, Object> datos = new HashMap<>();
    datos.put("fecha", new java.sql.Date(nuevaFecha.getTime()));
    datos.put("hora", nuevaHora);
    datos.put("id_dentista", idDentista);

    boolean exito = conexion.actualizarPorCampo("cita", datos, "id_cita", cita.getIdCita());
    if (!exito) {
        JOptionPane.showMessageDialog(this, "Error al actualizar la cita");
    }
}


   



    private void txtDentistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDentistaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDentistaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CambiarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CambiarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CambiarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CambiarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cmbHora;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private com.toedter.calendar.JDateChooser nuevaFecha;
    private javax.swing.JTextField txtDentista;
    // End of variables declaration//GEN-END:variables
}
